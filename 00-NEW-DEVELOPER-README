# Some hints for new Developer/Maintainer

Index:

1. # get a account at tuxfamily.org

2.0 # basic subversion commands
  2.1 # checkout the overlay
  2.2 # howto add a new ebuild to the tree
  2.3 # just change a ebuild
  2.4 # delete some files/directories
  2.5 # move files around (e.g bumping) (if former version is obsolete)
  2.6 # reverse your local changes to an ebuild/folder
  2.7 # display the subversion log
  2.8 # edit the logfile if your message was not correct
  2.9 # change the repository server location (JFYI)
  2.10 # generate patches for review something
  2.11 # login automatically to svn-server

3. # our policy/rules
  3.1 # read the ebuild documentation at
  3.1.1 # run svn up
  3.2 # ebuild license
  3.3 # check your ebuilds if they are acutally working
  3.4 # redigest your ebuild
  3.5 # update the package list
  3.6 # add missing apps to TODO
  3.7 # 00-README 00-OVERLAY-INFO
  3.8 # change the rules/scripts/ebuilds/readme's/...
  3.9 # hope this are not to much rules

4.0 # THOUGHTS about the overlay hierarchy:


1. # get a account at tuxfamily.org
  You need to get a account at http://tuxfamily.org 
  (they provide the svn-repo and Webspace)

2.0 # basic subversion commands
  You've to know how to checkout/commit the overlay repository:
  So here some basics:

2.1 # checkout the overlay 
  svn co svn+ssh://<your_tuxfamily_login>@svn.tuxfamily.org/svnroot/proaudio/proaudio
  # or
  svn co --username <your_tuxfamily_login> svn+ssh://svn.tuxfamily.org/svnroot/proaudio/proaudio

  # for me the subversion server asked me three times before 
  # accepting my password

2.2 # howto add a new ebuild to the tree   
  # go inside your repository checkout eg into media-sound
  cd ~/path/to/proaudio/media-sound
  mkdir foo
  cd foo
  vi foo-0.1.ebuild
  ebuild foo-0.1.ebuild digest
  cd ..
  svn st|status	# see the changes made to local repository
		# ? - means not added to the tree (svn ci ignore those files)
		# A - means freshly added to the overlay but not commited
		# C - means conflicting with a previous revision
		# 	to avoid this: do a "svn up" to make sure
		# 	you edit the latest version of a ebuild
		# D - means files gets deleted with next commit
		# U - means updated

  svn add foo 	# adds directory foo recurively  to the overlay (only local) 
  svn ci|commit	# until commit nothing changes in the repository on the 
   		# svn-server
  svn ci -m 'what this commit changes' # you could add just in one line what
  		# your commit actually changes instead of using a vim/nano/...



2.3 # just change a ebuild 
  # 1. close the your prefered editor 
  # 2. redigest your ebuild
  svn st	# displays the changes made to the overlay 
  svn ci	# commit changes

2.4 # delete some files/directories
  svn del foo 	# this changes are just local on your copy of the repository
		# sometimes svn don't allow to delete things so try with --force
  svn ci	# commit changes


2.5 # move files around (e.g bumping) (if former version is obsolete)
  svn mv foo/foobar-123.ebuild foo/foobar-124.ebuild
  # if not obsolete you could also bump with svn cp
  svn cp foo/foobar-123.ebuild foo/foobar-124.ebuild
  # or of course with just 'cp' and adding new files afterwards with
  svn add foo/foobar-124.ebuild


2.6 # reverse your local changes to an ebuild/folder
  svn revert path/to/file_which_you_want_to_revert # revert a file
  svn revert -R foo/	# revert recursively all changes made in foo/


2.7 # display the subversion log
  svn log 	# diplays the logfile


2.8 # edit the logfile if your message was not correct 
  # and you feel you should correct it
  svn propedit svn:log --revprop -r <revision-number>


2.9 # change the repository server location (JFYI) :)
  svn switch --relocate svn://svn.tuxfamily.org/svnroot/ckpp/proaudio svn://svn.tuxfamily.org/svnroot/proaudio/proaudio/


2.10 # generate patches for review something 
  # eg. local modification to last checkout
  svn diff foo/foobar-123.ebuild
  # or a diff to a specific revision
  svn diff -r 3 foo/foobar-123.ebuild


2.11 # login automatically to svn-server
  # put your id_rsa.pub key to the root of your 
  # (generate one if you don't have already one)
    --> ssh-keygen -t rsa
  # ftp-account at ftp.tuxfamily.org you can use ncftpput (emerge ncftp)
  # or any other ftp-client
  ncftpput -u <your_tuxfamily_login> -C ftp.tuxfamily.org ~/.ssh/id_rsa.pub ssh_keys


3. # our policy/rules

3.1 # read the ebuild documentation at
   http://proaudio.tuxfamily.org/wiki/index.php?title=Contribute_ebuilds 
   # and the also the gentoo ebuild manuals :)


3.1.1 # run svn up
  # to avoid double-work always work on the latest checkout with
  svn up


3.2 # ebuild license
  # All commited ebuild must have to be licensed gnu gpl v2
  # so contribute with proper header eg.
  
  # Copyright 1999-2007 Gentoo Foundation
  # Distributed under the terms of the GNU General Public License v2
  # $Header: $


3.3 # check your ebuilds if they are acutally working
  # put the correct archs into KEYWORDS (I prefer mostly stable keywords but if
  # the new version of a ebuild couldn't break things do ~arch or -*)
  # ALL snapshot ebuilds Have -* as useflag and use the scheme:
  foobar-9999.ebuild


3.4 # redigest your ebuild
  # try to assure that you've redigest your ebuild before commit
  # and also make sure that there are no temporary files laying around
  # which cause digest failures for other people


3.5 # update the package list
  # please execute both scripts before commiting some bumped or new
  # ebuilds to the overlay.
  # Execute this scripts inside the overlay root. They modify two
  # files inside the overlay.
  ./prepare_tree	# checks for some digest breakage and
  			# generates 00-PACKAGES-LIST
  # and generate with 
  ./generate-detailed-packages-list # generate 00-DETAILED-PACKAGES-LIST


3.6 # add missing apps to TODO
  # if you've found an nice to have app which is not already in the overlay
  # and have no time to do your own ebuild put a note into this file in the
  # root of the overlay (This file is absolutely not ordered)


3.7 # 00-README 00-OVERLAY-INFO
  # this both files gives a bit of introduction to the overlay
  # should be updated (feel free to edit them)


3.8 # change the rules/scripts/ebuilds/readme's/...
  # you're free to change other peoples ebuilds if you could improve/fix
  # You could also fix/enhance all scripts at point 3.5


3.9 # hope this are not to much rules


4.0 # THOUGHTS about the overlay hierarchy:
  # for absolute experimental ebuild we should add a dev branch?
  # Maybe we should move the overlay from 
  svn.tuxfamily.org/svnroot/proaudio/proaudio
  # to 
  svn.tuxfamily.org/svnroot/proaudio/trunk/overlays/proaudio
  # so we could add a dev-tree eg.
  svn.tuxfamily.org/svnroot/proaudio/trunk/overlays/proaudio-dev

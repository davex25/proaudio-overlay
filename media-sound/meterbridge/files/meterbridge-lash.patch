diff -urN a/configure.in b/configure.in
--- a/configure.in	2003-06-05 14:03:05.000000000 +0200
+++ b/configure.in	2006-03-15 21:13:11.466323567 +0100
@@ -1,6 +1,7 @@
 # Process this file with autoconf to produce a configure script.
-AC_INIT(src/main.c)
-AM_CONFIG_HEADER(src/config.h)
+AC_INIT
+AC_CONFIG_SRCDIR([src/main.c])
+AC_CONFIG_HEADERS([src/config.h])
 AM_INIT_AUTOMAKE(meterbridge, 0.9.2)
 
 # Checks for programs.
@@ -16,6 +17,42 @@
 AC_SUBST(JACK_CFLAGS)
 AC_SUBST(JACK_LIBS)
 
+
+##############
+### LASH ###
+##############
+tm_enable_lash="yes"
+AC_ARG_ENABLE(lash,
+[  --disable-lash        disable LASH support],[
+  case "$enableval" in
+    "yes")
+      ;;
+    "no")
+      tm_enable_lash="no"
+      ;;
+    *)
+      AC_MSG_ERROR([must use --enable-lash(=yes/no) or --disable-lash])
+      ;;
+  esac
+])
+
+if test "$tm_enable_lash" = "yes"; then
+  PKG_CHECK_MODULES(LASH, lash-1.0 >= 0.4.0, LASH_FOUND="yes", LASH_FOUND="no")
+  
+  if test "$LASH_FOUND" = "yes"; then
+    AC_DEFINE(HAVE_LASH, 1, [whether or not we are supporting lash])
+    LASH_VERSION=$( pkg-config --modversion lash-1.0 )
+    AC_DEFINE_UNQUOTED(LASH_VERSION, "$LASH_VERSION", [The version of lash we're compiling against])
+    AC_SUBST(LASH_CFLAGS)
+    AC_SUBST(LASH_LIBS)
+  fi
+else
+  AC_MSG_WARN([LASH support is disabled])
+  LASH_FOUND="no"
+fi
+AM_CONDITIONAL(HAVE_LASH, test "$LASH_FOUND" = "yes")
+
+
 # Checks for header files.
 AC_HEADER_STDC
 AC_CHECK_HEADERS([stdlib.h string.h unistd.h])
@@ -27,4 +64,5 @@
 # Checks for library functions.
 AC_CHECK_FUNCS([atexit])
 
-AC_OUTPUT([Makefile graphics/Makefile src/Makefile])
+AC_CONFIG_FILES([Makefile graphics/Makefile src/Makefile m4/Makefile])
+AC_OUTPUT
diff -urN a/m4/Makefile.am b/m4/Makefile.am
--- a/m4/Makefile.am	1970-01-01 01:00:00.000000000 +0100
+++ b/m4/Makefile.am	2006-03-15 21:13:11.467323394 +0100
@@ -0,0 +1,2 @@
+EXTRA_DIST = sdl.m4
+
diff -urN a/m4/sdl.m4 b/m4/sdl.m4
--- a/m4/sdl.m4	1970-01-01 01:00:00.000000000 +0100
+++ b/m4/sdl.m4	2006-03-15 21:13:11.478321487 +0100
@@ -0,0 +1,175 @@
+# Configure paths for SDL
+# Sam Lantinga 9/21/99
+# stolen from Manish Singh
+# stolen back from Frank Belew
+# stolen from Manish Singh
+# Shamelessly stolen from Owen Taylor
+
+dnl AM_PATH_SDL([MINIMUM-VERSION, [ACTION-IF-FOUND [, ACTION-IF-NOT-FOUND]]])
+dnl Test for SDL, and define SDL_CFLAGS and SDL_LIBS
+dnl
+AC_DEFUN([AM_PATH_SDL],
+[dnl 
+dnl Get the cflags and libraries from the sdl-config script
+dnl
+AC_ARG_WITH(sdl-prefix,[  --with-sdl-prefix=PFX   Prefix where SDL is installed (optional)],
+            sdl_prefix="$withval", sdl_prefix="")
+AC_ARG_WITH(sdl-exec-prefix,[  --with-sdl-exec-prefix=PFX Exec prefix where SDL is installed (optional)],
+            sdl_exec_prefix="$withval", sdl_exec_prefix="")
+AC_ARG_ENABLE(sdltest, [  --disable-sdltest       Do not try to compile and run a test SDL program],
+		    , enable_sdltest=yes)
+
+  if test x$sdl_exec_prefix != x ; then
+     sdl_args="$sdl_args --exec-prefix=$sdl_exec_prefix"
+     if test x${SDL_CONFIG+set} != xset ; then
+        SDL_CONFIG=$sdl_exec_prefix/bin/sdl-config
+     fi
+  fi
+  if test x$sdl_prefix != x ; then
+     sdl_args="$sdl_args --prefix=$sdl_prefix"
+     if test x${SDL_CONFIG+set} != xset ; then
+        SDL_CONFIG=$sdl_prefix/bin/sdl-config
+     fi
+  fi
+
+  AC_REQUIRE([AC_CANONICAL_TARGET])
+  PATH="$prefix/bin:$prefix/usr/bin:$PATH"
+  AC_PATH_PROG(SDL_CONFIG, sdl-config, no, [$PATH])
+  min_sdl_version=ifelse([$1], ,0.11.0,$1)
+  AC_MSG_CHECKING(for SDL - version >= $min_sdl_version)
+  no_sdl=""
+  if test "$SDL_CONFIG" = "no" ; then
+    no_sdl=yes
+  else
+    SDL_CFLAGS=`$SDL_CONFIG $sdlconf_args --cflags`
+    SDL_LIBS=`$SDL_CONFIG $sdlconf_args --libs`
+
+    sdl_major_version=`$SDL_CONFIG $sdl_args --version | \
+           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\1/'`
+    sdl_minor_version=`$SDL_CONFIG $sdl_args --version | \
+           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\2/'`
+    sdl_micro_version=`$SDL_CONFIG $sdl_config_args --version | \
+           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\3/'`
+    if test "x$enable_sdltest" = "xyes" ; then
+      ac_save_CFLAGS="$CFLAGS"
+      ac_save_LIBS="$LIBS"
+      CFLAGS="$CFLAGS $SDL_CFLAGS"
+      LIBS="$LIBS $SDL_LIBS"
+dnl
+dnl Now check if the installed SDL is sufficiently new. (Also sanity
+dnl checks the results of sdl-config to some extent
+dnl
+      rm -f conf.sdltest
+      AC_TRY_RUN([
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include "SDL.h"
+
+char*
+my_strdup (char *str)
+{
+  char *new_str;
+  
+  if (str)
+    {
+      new_str = (char *)malloc ((strlen (str) + 1) * sizeof(char));
+      strcpy (new_str, str);
+    }
+  else
+    new_str = NULL;
+  
+  return new_str;
+}
+
+int main (int argc, char *argv[])
+{
+  int major, minor, micro;
+  char *tmp_version;
+
+  /* This hangs on some systems (?)
+  system ("touch conf.sdltest");
+  */
+  { FILE *fp = fopen("conf.sdltest", "a"); if ( fp ) fclose(fp); }
+
+  /* HP/UX 9 (%@#!) writes to sscanf strings */
+  tmp_version = my_strdup("$min_sdl_version");
+  if (sscanf(tmp_version, "%d.%d.%d", &major, &minor, &micro) != 3) {
+     printf("%s, bad version string\n", "$min_sdl_version");
+     exit(1);
+   }
+
+   if (($sdl_major_version > major) ||
+      (($sdl_major_version == major) && ($sdl_minor_version > minor)) ||
+      (($sdl_major_version == major) && ($sdl_minor_version == minor) && ($sdl_micro_version >= micro)))
+    {
+      return 0;
+    }
+  else
+    {
+      printf("\n*** 'sdl-config --version' returned %d.%d.%d, but the minimum version\n", $sdl_major_version, $sdl_minor_version, $sdl_micro_version);
+      printf("*** of SDL required is %d.%d.%d. If sdl-config is correct, then it is\n", major, minor, micro);
+      printf("*** best to upgrade to the required version.\n");
+      printf("*** If sdl-config was wrong, set the environment variable SDL_CONFIG\n");
+      printf("*** to point to the correct copy of sdl-config, and remove the file\n");
+      printf("*** config.cache before re-running configure\n");
+      return 1;
+    }
+}
+
+],, no_sdl=yes,[echo $ac_n "cross compiling; assumed OK... $ac_c"])
+       CFLAGS="$ac_save_CFLAGS"
+       LIBS="$ac_save_LIBS"
+     fi
+  fi
+  if test "x$no_sdl" = x ; then
+     AC_MSG_RESULT(yes)
+     ifelse([$2], , :, [$2])     
+  else
+     AC_MSG_RESULT(no)
+     if test "$SDL_CONFIG" = "no" ; then
+       echo "*** The sdl-config script installed by SDL could not be found"
+       echo "*** If SDL was installed in PREFIX, make sure PREFIX/bin is in"
+       echo "*** your path, or set the SDL_CONFIG environment variable to the"
+       echo "*** full path to sdl-config."
+     else
+       if test -f conf.sdltest ; then
+        :
+       else
+          echo "*** Could not run SDL test program, checking why..."
+          CFLAGS="$CFLAGS $SDL_CFLAGS"
+          LIBS="$LIBS $SDL_LIBS"
+          AC_TRY_LINK([
+#include <stdio.h>
+#include "SDL.h"
+
+int main(int argc, char *argv[])
+{ return 0; }
+#undef  main
+#define main K_and_R_C_main
+],      [ return 0; ],
+        [ echo "*** The test program compiled, but did not run. This usually means"
+          echo "*** that the run-time linker is not finding SDL or finding the wrong"
+          echo "*** version of SDL. If it is not finding SDL, you'll need to set your"
+          echo "*** LD_LIBRARY_PATH environment variable, or edit /etc/ld.so.conf to point"
+          echo "*** to the installed location  Also, make sure you have run ldconfig if that"
+          echo "*** is required on your system"
+	  echo "***"
+          echo "*** If you have an old version installed, it is best to remove it, although"
+          echo "*** you may also be able to get things to work by modifying LD_LIBRARY_PATH"],
+        [ echo "*** The test program failed to compile or link. See the file config.log for the"
+          echo "*** exact error that occured. This usually means SDL was incorrectly installed"
+          echo "*** or that you have moved SDL since it was installed. In the latter case, you"
+          echo "*** may want to edit the sdl-config script: $SDL_CONFIG" ])
+          CFLAGS="$ac_save_CFLAGS"
+          LIBS="$ac_save_LIBS"
+       fi
+     fi
+     SDL_CFLAGS=""
+     SDL_LIBS=""
+     ifelse([$3], , :, [$3])
+  fi
+  AC_SUBST(SDL_CFLAGS)
+  AC_SUBST(SDL_LIBS)
+  rm -f conf.sdltest
+])
diff -urN a/src/main.c b/src/main.c
--- a/src/main.c	2003-06-05 13:32:30.000000000 +0200
+++ b/src/main.c	2006-03-15 21:13:11.479321314 +0100
@@ -31,6 +31,11 @@
 void cleanup(void);
 int store(char *path, void *data);
 
+#ifdef HAVE_LASH
+SDL_Thread  *lash_thread = NULL;
+#include <mb_lash.h>
+#endif
+
 SDL_Thread *gt;
 SDL_Surface *screen;
 SDL_Surface *background_image, *meter, *meter_buf;
@@ -63,6 +68,11 @@
 	char window_name[256];
 	char *us_client_name = NULL;
 
+#ifdef HAVE_LASH
+	lash_args_t *lash_args = lash_extract_args(&argc, &argv);
+	start_lash(lash_args);
+#endif
+
 	num_meters = argc;
 	while ((opt = getopt(argc, argv, "t:r:c:n:h")) != -1) {
 		switch (opt) {
@@ -221,6 +231,10 @@
 	snprintf(window_name, 255, "%s %s", meter_name, client_name);
 	SDL_WM_SetCaption(window_name, client_name);
 
+#ifdef HAVE_LASH
+    lash_jack_client_name(lash_client, client_name);
+#endif
+
 	/* Start the graphics thread */
 	switch (meter_type) {
 		case MET_VU:
@@ -239,6 +253,9 @@
 			gt = SDL_CreateThread(gfx_thread_scope, NULL);
 			break;
 	}
+#ifdef HAVE_LASH
+	lash_thread = SDL_CreateThread(lash_thread_func, NULL);
+#endif
 
 	/* Pick the jack process method */
 	if (meter_type == MET_VU) {
@@ -378,6 +395,11 @@
 	/* Leave the jack graph */
 	jack_client_close(client);
 
+	/* Kill the LASH thread */
+#ifdef HAVE_LASH
+	SDL_KillThread(lash_thread);
+#endif
+
 	/* Get rid of the GUI stuff */
 	SDL_KillThread(gt);
 	SDL_Quit();
diff -urN a/src/Makefile.am b/src/Makefile.am
--- a/src/Makefile.am	2003-06-05 12:50:28.000000000 +0200
+++ b/src/Makefile.am	2006-03-15 21:13:11.520314207 +0100
@@ -1,9 +1,13 @@
 #CFLAGS = -O6 `sdl-config --cflags` -DPKG_DATA_DIR=\"$(pkgdatadir)\"
-CFLAGS = -Wall -g $(SDL_CFLAGS) $(JACK_CFLAGS) -DPKG_DATA_DIR=\"$(pkgdatadir)\"
+AM_CFLAGS = -Wall -g $(SDL_CFLAGS) $(JACK_CFLAGS) -DPKG_DATA_DIR=\"$(pkgdatadir)\" @LASH_CFLAGS@
 
 bin_PROGRAMS = meterbridge
 
 EXTRA_DIST = *.h
 
 meterbridge_SOURCES = main.c linedraw.c vu_meters.c ppm_meters.c dpm_meters.c jf_meters.c scope.c envelopes.c find_image.c
-meterbridge_LDFLAGS = -lm $(JACK_LIBS) $(SDL_LIBS) -lSDL_image
+meterbridge_LDFLAGS = -lm $(JACK_LIBS) $(SDL_LIBS) $(LASH_LIBS) -lSDL_image
+
+if HAVE_LASH
+meterbridge_SOURCES += mb_lash.h mb_lash.c
+endif
diff -urN a/src/mb_lash.c b/src/mb_lash.c
--- a/src/mb_lash.c	1970-01-01 01:00:00.000000000 +0100
+++ b/src/mb_lash.c	2006-03-15 21:13:11.521314034 +0100
@@ -0,0 +1,51 @@
+#include "mb_lash.h"
+#include <unistd.h>
+#include <SDL.h>
+
+// main.c
+void cleanup();
+
+void
+start_lash(lash_args_t *args)
+{
+	lash_client = lash_init(args, "TimeMachine", 0, LASH_PROTOCOL(2, 0));
+	
+	if (!lash_client)
+		fprintf(stderr, "could not initialise LASH\n");
+	
+	lash_event_t *event = lash_event_new_with_type(LASH_Client_Name);
+	lash_event_set_string(event, "Meterbridge");
+	lash_send_event(lash_client, event);
+}
+
+int
+lash_thread_func(void *unused)
+{
+	lash_event_t  *event;
+	lash_config_t *config;
+	int            quit = 0;
+	
+	while (!quit) {
+		while ((event = lash_get_event(lash_client))) {
+			if (lash_event_get_type(event) == LASH_Quit) {
+				quit = 1;
+				break;
+			} else {
+				fprintf(stderr, "Unhandled LASH event: type %d, '%s''\n",
+					  lash_event_get_type(event), lash_event_get_string(event));
+			}
+		}
+	
+		while ((config = lash_get_config(lash_client))) {
+			fprintf(stderr, "Unexpected LASH config: %s\n",
+				  lash_config_get_key(config));
+		}
+	
+		usleep(10000);
+	}
+
+	SDL_Quit();
+	cleanup();
+
+	return 0;
+}
diff -urN a/src/mb_lash.h b/src/mb_lash.h
--- a/src/mb_lash.h	1970-01-01 01:00:00.000000000 +0100
+++ b/src/mb_lash.h	2006-03-15 21:13:11.522313860 +0100
@@ -0,0 +1,6 @@
+#include <lash/lash.h>
+
+static lash_client_t *lash_client = NULL;
+
+void start_lash(lash_args_t *args);
+int lash_thread_func(void*);

diff -ur --unidirectional-new-file seq24-0.8.3/configure.in seq24-0.8.3-dr-lash-1/configure.in
--- seq24-0.8.3/configure.in	2006-02-16 23:44:39.000000000 -0500
+++ seq24-0.8.3-dr-lash-1/configure.in	2006-03-04 14:58:03.000000000 -0500
@@ -1,7 +1,7 @@
 dnl Process this file with autoconf to produce a configure script.
 AC_INIT(src/event.cpp)
 
-AM_CONFIG_HEADER(src/config.h)
+AC_CONFIG_HEADER(src/config.h)
 
 AM_INIT_AUTOMAKE(seq24, 0.8.3)
 
@@ -41,7 +41,8 @@
 dnl
 jack_support=yes
                                                                                                                  
-AC_ARG_ENABLE(jack-support, [  --disable-jack-support   Compile without JACK support], [jack_support=$enableval])                                                                                                                 
+AC_ARG_ENABLE(jack-support, [AS_HELP_STRING(--disable-jack-support, [Compile without JACK support])], [jack_support=$enableval])
+
 JACK_SUPPORT=0
                                                                                                                  
 if test "$jack_support" != "no"; then
@@ -62,6 +63,29 @@
 AC_SUBST(JACK_LIBS)
 
 
+dnl
+dnl    LASH SUPPORT
+dnl
+lash_support="yes"
+AC_ARG_ENABLE(lash,
+        [AS_HELP_STRING(--enable-lash, [Enable LASH session management support (true)])],
+        [ if test x$enable_lash = xno ; then lash_support=no ; fi ])
+	
+lash_found="no"
+if test "$lash_support" = "yes"; then
+    PKG_CHECK_MODULES(LASH, lash-1.0 >= 0.5.0, lash_found="yes", lash_found="no")
+	if test "$lash_found" = "yes"; then
+		AC_DEFINE(LASH_SUPPORT, 1, [Define to enable LASH support])
+		AC_SUBST(LASH_CFLAGS)
+		AC_SUBST(LASH_LIBS)
+	else
+        AC_MSG_WARN([ *** LASH not found, session support will not be built.])
+	fi
+else
+	AC_MSG_WARN([ *** LASH support not enabled.]);
+fi
+
+
 AC_OUTPUT(Makefile src/Makefile)
 
 
diff -ur --unidirectional-new-file seq24-0.8.3/src/config.h.in seq24-0.8.3-dr-lash-1/src/config.h.in
--- seq24-0.8.3/src/config.h.in	2006-02-16 23:45:44.000000000 -0500
+++ seq24-0.8.3-dr-lash-1/src/config.h.in	2006-03-04 15:13:00.000000000 -0500
@@ -39,6 +39,9 @@
 /* Define to enable JACK driver */
 #undef JACK_SUPPORT
 
+/* Define to enable LASH support */
+#undef LASH_SUPPORT
+
 /* Name of package */
 #undef PACKAGE
 
diff -ur --unidirectional-new-file seq24-0.8.3/src/dump.cpp seq24-0.8.3-dr-lash-1/src/dump.cpp
--- seq24-0.8.3/src/dump.cpp	2006-02-12 19:15:54.000000000 -0500
+++ seq24-0.8.3-dr-lash-1/src/dump.cpp	2006-03-04 15:17:21.000000000 -0500
@@ -53,25 +53,25 @@
             long beat = (clock / 24 ) %  4;
             long tick =  clock           % 24;
             
-            printf( "clock [%d] [%d][%d][%d]\n", clock, bar+1, beat+1, tick );
+            printf( "clock [%ld] [%ld][%ld][%ld]\n", clock, bar+1, beat+1, tick );
         }
         if ( buf[0] == 0xfa )
         {
             clock=0; 
-            printf( "start [%d]\n", clock );
+            printf( "start [%ld]\n", clock );
         }
         if ( buf[0] == 0xfc )
         {
-            printf( "stop [%d]\n", clock );
+            printf( "stop [%ld]\n", clock );
         }
         if ( buf[0] == 0xfb )
         {
-            printf( "continue [%d]\n", clock );
+            printf( "continue [%ld]\n", clock );
         }
         if ( buf[0] == 0xf2 )
         {
             clock = ((buf[2] << 7) | buf[1]) * 6; 
-            printf( "songpos [%d]\n", clock );
+            printf( "songpos [%ld]\n", clock );
         }
 
  
diff -ur --unidirectional-new-file seq24-0.8.3/src/event.cpp seq24-0.8.3-dr-lash-1/src/event.cpp
--- seq24-0.8.3/src/event.cpp	2006-02-12 19:15:54.000000000 -0500
+++ seq24-0.8.3-dr-lash-1/src/event.cpp	2006-03-04 15:15:09.000000000 -0500
@@ -72,7 +72,7 @@
 void 
 event::make_clock( )
 {
-    m_status = (char) EVENT_MIDI_CLOCK;
+    m_status = (unsigned char) EVENT_MIDI_CLOCK;
 }
 
 void 
@@ -227,7 +227,7 @@
 void 
 event::print()
 {
-    printf( "[%06ld] [%04X] %02X ",
+    printf( "[%06ld] [%04lX] %02X ",
 	    m_timestamp,
 	    m_size,
 	    m_status );
diff -ur --unidirectional-new-file seq24-0.8.3/src/lash.cpp seq24-0.8.3-dr-lash-1/src/lash.cpp
--- seq24-0.8.3/src/lash.cpp	1969-12-31 19:00:00.000000000 -0500
+++ seq24-0.8.3-dr-lash-1/src/lash.cpp	2006-03-04 14:48:22.000000000 -0500
@@ -0,0 +1,124 @@
+//----------------------------------------------------------------------------
+//
+//  This file is part of seq24.
+//
+//  seq24 is free software; you can redistribute it and/or modify
+//  it under the terms of the GNU General Public License as published by
+//  the Free Software Foundation; either version 2 of the License, or
+//  (at your option) any later version.
+//
+//  seq24 is distributed in the hope that it will be useful,
+//  but WITHOUT ANY WARRANTY; without even the implied warranty of
+//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+//  GNU General Public License for more details.
+//
+//  You should have received a copy of the GNU General Public License
+//  along with seq24; if not, write to the Free Software
+//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+//
+//-----------------------------------------------------------------------------
+
+#include <string>
+#include <sigc++/slot.h>
+#include <gtkmm.h>
+#include "config.h"
+#include "lash.h"
+#include "midifile.h"
+
+
+lash::lash(int *argc, char ***argv)
+{
+#ifdef LASH_SUPPORT
+    m_client = lash_init(lash_extract_args(argc, argv), PACKAGE_NAME,
+        LASH_Config_File, LASH_PROTOCOL(2, 0));
+    if (m_client == NULL) {
+        fprintf(stderr, "Failed to connect to LASH.  Session management will not occur.");
+    } else {
+        lash_event_t* event = lash_event_new_with_type(LASH_Client_Name);
+        lash_event_set_string(event, "Seq24");
+        lash_send_event(m_client, event);
+        printf("[Connected to LASH]\n");
+    }
+#endif // LASH_SUPPORT
+}
+
+
+void
+lash::set_alsa_client_id(int id)
+{
+#ifdef LASH_SUPPORT
+	lash_alsa_client_id(m_client, id);
+#endif
+}
+
+
+void
+lash::start(perform* perform)
+{
+#ifdef LASH_SUPPORT
+	m_perform = perform;
+	
+    /* Process any LASH events every 250 msec (arbitrarily chosen interval) */
+    Glib::signal_timeout().connect(sigc::mem_fun(*this, &lash::process_events), 250);
+#endif // LASH_SUPPORT
+}
+    
+
+#ifdef LASH_SUPPORT
+
+bool
+lash::process_events()
+{
+    lash_event_t  *ev = NULL;
+    //lash_config_t *conf = NULL;
+
+    // Process events
+    while ((ev = lash_get_event(m_client)) != NULL) {
+        handle_event(ev);
+        lash_event_destroy(ev);    
+    }
+
+    return true;
+}
+
+
+void
+lash::handle_event(lash_event_t* ev)
+{
+    LASH_Event_Type type   = lash_event_get_type(ev);
+    const char      *c_str = lash_event_get_string(ev);
+    std::string     str    = (c_str == NULL) ? "" : c_str;
+    
+	fprintf(stderr, "*********** event, type = %d\n", type);
+
+    if (type == LASH_Save_File) {
+        midifile f(str + "/seq24.mid");
+        f.write(m_perform);
+        lash_send_event(m_client, lash_event_new_with_type(LASH_Save_File));
+    } else if (type == LASH_Restore_File) {
+        midifile f(str + "/seq24.mid");
+        f.parse(m_perform, 0);
+        lash_send_event(m_client, lash_event_new_with_type(LASH_Restore_File));
+    } else if (type == LASH_Quit) {
+        m_client = NULL;
+        Gtk::Main::quit();
+    } else {
+		fprintf(stderr, "Warning:  Unhandled LASH event.\n");
+	}
+}
+
+
+void
+lash::handle_config(lash_config_t* conf)
+{
+    const char *key     = NULL;
+    const void *val     = NULL;
+    size_t     val_size = 0;
+
+    key      = lash_config_get_key(conf);
+    val      = lash_config_get_value(conf);
+    val_size = lash_config_get_value_size(conf);
+}
+
+
+#endif // LASH_SUPPORT
diff -ur --unidirectional-new-file seq24-0.8.3/src/lash.h seq24-0.8.3-dr-lash-1/src/lash.h
--- seq24-0.8.3/src/lash.h	1969-12-31 19:00:00.000000000 -0500
+++ seq24-0.8.3-dr-lash-1/src/lash.h	2006-03-04 14:21:03.000000000 -0500
@@ -0,0 +1,60 @@
+//----------------------------------------------------------------------------
+//
+//  This file is part of seq24.
+//
+//  seq24 is free software; you can redistribute it and/or modify
+//  it under the terms of the GNU General Public License as published by
+//  the Free Software Foundation; either version 2 of the License, or
+//  (at your option) any later version.
+//
+//  seq24 is distributed in the hope that it will be useful,
+//  but WITHOUT ANY WARRANTY; without even the implied warranty of
+//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+//  GNU General Public License for more details.
+//
+//  You should have received a copy of the GNU General Public License
+//  along with seq24; if not, write to the Free Software
+//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+//
+//-----------------------------------------------------------------------------
+
+#ifndef SEQ24_LASH
+#define SEQ24_LASH
+
+#include "config.h"
+#include "perform.h"
+
+#ifdef LASH_SUPPORT
+#include <lash/lash.h>
+#endif // LASH_SUPPORT
+
+/* all the ifdef skeleton work is done in this class in such a way that any
+ * other part of the code can use this class whether or not lash support is
+ * actually built in (the functions will just do nothing) */
+
+class lash
+{
+private:
+#ifdef LASH_SUPPORT
+    perform       *m_perform;
+    lash_client_t *m_client;
+    
+    bool process_events();
+    void handle_event(lash_event_t* conf);
+    void handle_config(lash_config_t* conf);
+
+#endif // LASH_SUPPORT
+    
+public:
+    lash(int *argc, char ***argv);
+   	
+	void set_alsa_client_id(int id);
+    void start(perform* perform);
+};
+
+
+/* global lash driver, defined in seq24.cpp */
+extern lash *lash_driver;
+
+
+#endif // SEQ24_LASH
diff -ur --unidirectional-new-file seq24-0.8.3/src/mainwid.cpp seq24-0.8.3-dr-lash-1/src/mainwid.cpp
--- seq24-0.8.3/src/mainwid.cpp	2006-02-12 19:15:54.000000000 -0500
+++ seq24-0.8.3-dr-lash-1/src/mainwid.cpp	2006-03-04 15:11:10.000000000 -0500
@@ -152,7 +152,7 @@
 	int base_y = (c_mainwid_border +
 		      (c_seqarea_y + c_mainwid_spacing) * j);
 
-	int local_seq = a_seq % c_seqs_in_set;
+	/*int local_seq = a_seq % c_seqs_in_set;*/
 
 	m_gc->set_foreground(m_black);
 	m_pixmap->draw_rectangle(m_gc, true,
@@ -207,11 +207,11 @@
 	
 	    /* midi channel + key + timesig */
 
-	    char key =  m_seq_to_char[local_seq];
-	  
+		/*char key =  m_seq_to_char[local_seq];*/
+
 	    char str[20];
 	    sprintf( str, 
-		     "%d-%d %d/%d", 
+		     "%d-%d %ld/%ld", 
 		     seq->get_midi_bus(), 
 		     seq->get_midi_channel()+1,
 		     seq->get_bpm(), seq->get_bw() );
diff -ur --unidirectional-new-file seq24-0.8.3/src/Makefile.am seq24-0.8.3-dr-lash-1/src/Makefile.am
--- seq24-0.8.3/src/Makefile.am	2006-02-02 23:57:28.000000000 -0500
+++ seq24-0.8.3-dr-lash-1/src/Makefile.am	2006-03-04 13:25:57.000000000 -0500
@@ -2,8 +2,8 @@
 
 
 
-CXXFLAGS = @CXXFLAGS@ $(DEPS_CFLAGS) $(GTKMM_CFLAGS) $(JACK_CFLAGS) -Wall
-LDADD = $(DEPS_LIBS)  $(GTKMM_LIBS) $(ALSA_LIBS) $(JACK_LIBS) 
+AM_CXXFLAGS = $(DEPS_CFLAGS) $(GTKMM_CFLAGS) $(JACK_CFLAGS) $(LASH_CFLAGS) -Wall
+LDADD = $(DEPS_LIBS)  $(GTKMM_LIBS) $(ALSA_LIBS) $(JACK_LIBS) $(LASH_LIBS)
 
 bin_PROGRAMS = seq24 dump
 
@@ -17,7 +17,8 @@
 controllers.h mutex.h mutex.cpp midifile.cpp midifile.h options.h \
 options.cpp perfedit.cpp perfedit.h perfnames.cpp perfnames.h \
 perfroll.cpp perfroll.h perftime.cpp perftime.h maintime.h maintime.cpp \
-font.cpp font.h optionsfile.cpp optionsfile.h seqmenu.h seqmenu.cpp
+font.cpp font.h optionsfile.cpp optionsfile.h seqmenu.h seqmenu.cpp \
+lash.h lash.cpp
 
 EXTRA_DIST = *.xpm 
 
diff -ur --unidirectional-new-file seq24-0.8.3/src/midibus.cpp seq24-0.8.3-dr-lash-1/src/midibus.cpp
--- seq24-0.8.3/src/midibus.cpp	2006-02-12 19:15:54.000000000 -0500
+++ seq24-0.8.3-dr-lash-1/src/midibus.cpp	2006-03-04 14:19:54.000000000 -0500
@@ -20,6 +20,7 @@
 #include "midibus.h"
 #include "config.h"
 #include "sys/poll.h"
+#include "lash.h"
 
 midibus::midibus( int a_localclient,
 		  int a_destclient, 
@@ -851,6 +852,8 @@
     /* set up our clients queue */
     m_queue = snd_seq_alloc_queue( m_alsa_seq );
 
+	/* notify lash of our client ID so it can restore connections */
+	lash_driver->set_alsa_client_id(snd_seq_client_id(m_alsa_seq));
 }
 
 void
diff -ur --unidirectional-new-file seq24-0.8.3/src/midifile.cpp seq24-0.8.3-dr-lash-1/src/midifile.cpp
--- seq24-0.8.3/src/midifile.cpp	2006-02-12 19:15:54.000000000 -0500
+++ seq24-0.8.3-dr-lash-1/src/midifile.cpp	2006-03-04 15:16:11.000000000 -0500
@@ -481,7 +481,7 @@
             unsigned long
                 seqs = read_long ();
 
-            for (int i = 0; i < seqs; i++)
+            for (unsigned int i = 0; i < seqs; i++)
             {
 
                 a_perf->get_midi_control_toggle (i)->m_active = m_d[m_pos++];
@@ -702,7 +702,7 @@
             note = a_perf->get_screen_set_notepad (i);
         write_short (note->length ());
 
-        for (int j = 0; j < note->length (); j++)
+        for (unsigned int j = 0; j < note->length (); j++)
             m_l.push_front ((*note)[j]);
     }
 
diff -ur --unidirectional-new-file seq24-0.8.3/src/perfnames.cpp seq24-0.8.3-dr-lash-1/src/perfnames.cpp
--- seq24-0.8.3/src/perfnames.cpp	2006-02-12 19:43:45.000000000 -0500
+++ seq24-0.8.3-dr-lash-1/src/perfnames.cpp	2006-03-04 15:09:57.000000000 -0500
@@ -175,7 +175,7 @@
                 
             char str[20];
             sprintf( str, 
-                     "%d-%d %d/%d", 
+                     "%d-%d %ld/%ld", 
                      m_mainperf->get_sequence(sequence)->get_midi_bus(), 
                      m_mainperf->get_sequence(sequence)->get_midi_channel()+1,
                      m_mainperf->get_sequence(sequence)->get_bpm(),
@@ -260,7 +260,7 @@
 {
     int sequence;
     
-    int x = (int) a_e->x;
+    /*int x = (int) a_e->x;*/
     int y = (int) a_e->y;
     
     convert_y( y, &sequence );
diff -ur --unidirectional-new-file seq24-0.8.3/src/perform.cpp seq24-0.8.3-dr-lash-1/src/perform.cpp
--- seq24-0.8.3/src/perform.cpp	2006-02-12 19:15:54.000000000 -0500
+++ seq24-0.8.3-dr-lash-1/src/perform.cpp	2006-03-04 15:28:49.000000000 -0500
@@ -809,14 +809,14 @@
     
     current_tick *= 10;
     
-    pos.bar  = (int) current_tick / (long) pos.ticks_per_beat / pos.beats_per_bar;
-    pos.beat = (int) (current_tick / (long) pos.ticks_per_beat) % 4; 
-    pos.tick = current_tick % (c_ppqn * 10);
+    pos.bar  = (int32_t) (current_tick / (long) pos.ticks_per_beat / pos.beats_per_bar);
+    pos.beat = (int32_t) ((current_tick / (long) pos.ticks_per_beat) % 4); 
+    pos.tick = (int32_t) (current_tick % (c_ppqn * 10));
 
     pos.bar_start_tick = pos.bar * pos.beats_per_bar * pos.ticks_per_beat;
     pos.frame_rate = rate;
-    pos.frame = (current_tick * rate * 60.0)
-        / (pos.ticks_per_beat * pos.beats_per_minute);
+    pos.frame = (jack_nframes_t) ( (current_tick * rate * 60.0)
+        / (pos.ticks_per_beat * pos.beats_per_minute) );
 
     /*
     ticks * 10 = jack ticks;
@@ -1067,6 +1067,11 @@
           p->inner_start( global_jack_start_mode );
           break;
 
+      case JackTransportLooping:
+          
+          //printf( "[JackTransportLooping]" );
+          break;
+
   }
 
   //printf( "starting frame[%d] tick[%8.2f]\n", p->m_jack_frame_current, p->m_jack_tick );
@@ -1253,7 +1258,7 @@
                                 //printf( "> current_tick[%lf]\n", current_tick );
                             }        
                             reset_sequences();
-                            set_orig_ticks( current_tick );
+                            set_orig_ticks( (long)current_tick );
                         }
                     }
                 }
@@ -1332,8 +1337,8 @@
                     //printf( " bbb [%2d:%2d:%4d]", pbar+1, pbeat+1, ptick );
                     //printf( " bbb [%2d:%2d:%4d]", m_jack_pos.bar, m_jack_pos.beat, m_jack_pos.tick );
 
-                    double jack_tick = (m_jack_pos.bar-1) * (m_jack_pos.ticks_per_beat *  m_jack_pos.beats_per_bar ) +
-                        (m_jack_pos.beat-1) * m_jack_pos.ticks_per_beat + m_jack_pos.tick;
+                    /*double jack_tick = (m_jack_pos.bar-1) * (m_jack_pos.ticks_per_beat *  m_jack_pos.beats_per_bar ) +
+                        (m_jack_pos.beat-1) * m_jack_pos.ticks_per_beat + m_jack_pos.tick;*/
 
                     //printf( " jtick[%8.3f]", m_jack_tick );
                     //printf( " mtick[%8.3f]", jack_tick );
@@ -1364,7 +1369,7 @@
             
             if( init_clock ) 
             {
-                m_master_bus.init_clock( clock_tick );
+                m_master_bus.init_clock( (long)clock_tick );
                 init_clock = false;
             }
             
@@ -1445,7 +1450,7 @@
             double next_clock_delta_us =  (( next_clock_delta ) * 60000000.0f / c_ppqn  / bpm );
 
             if ( next_clock_delta_us < (c_thread_trigger_width_ms * 1000.0f * 2.0f) ){
-                delta_us = next_clock_delta_us;
+                delta_us = (long)next_clock_delta_us;
             } 
 
 
@@ -1494,7 +1499,7 @@
                     stats_loop_index = 0;
                     stats_avg /= 200;
 
-                    printf( "stats_avg[%d]us stats_min[%d]us stats_max[%d]us\n", stats_avg, stats_min, stats_max );
+                    printf( "stats_avg[%ld]us stats_min[%ld]us stats_max[%ld]us\n", stats_avg, stats_min, stats_max );
 
                     stats_min = 0x7FFFFFFF;
                     stats_max = 0;
@@ -1513,16 +1518,16 @@
 
             printf ( "\n\n-- trigger width --\n" );
             for ( int i=0; i<100; i++ ){
-                printf( "[%3d][%8d]\n", i * 100, stats_all[i] );
+                printf( "[%3d][%8ld]\n", i * 100, stats_all[i] );
             }
             printf ( "\n\n-- clock width --\n" );
             int bpm  = m_master_bus.get_bpm();
 
-            printf ( "optimal : [%ld]us\n", ((c_ppqn / 24)* 60000000 / c_ppqn  / bpm )); 
+            printf ( "optimal : [%d]us\n", ((c_ppqn / 24)* 60000000 / c_ppqn  / bpm )); 
 
 
             for ( int i=0; i<100; i++ ){
-                printf( "[%3d][%8d]\n", i * 300, stats_clock[i] );
+                printf( "[%3d][%8ld]\n", i * 300, stats_clock[i] );
             }
 
 
diff -ur --unidirectional-new-file seq24-0.8.3/src/perfroll.cpp seq24-0.8.3-dr-lash-1/src/perfroll.cpp
--- seq24-0.8.3/src/perfroll.cpp	2006-02-12 19:46:39.000000000 -0500
+++ seq24-0.8.3-dr-lash-1/src/perfroll.cpp	2006-03-04 15:11:40.000000000 -0500
@@ -800,7 +800,7 @@
             long seq_length = m_mainperf->get_sequence( m_drop_sequence )->get_length( );
             tick = tick - (tick % seq_length);
 
-            long min_tick = (tick < m_drop_tick) ? tick : m_drop_tick;
+            /*long min_tick = (tick < m_drop_tick) ? tick : m_drop_tick;*/
             long length = seq_length;
             
 	    m_mainperf->get_sequence( m_drop_sequence )->grow_trigger( m_drop_tick, tick, length);
diff -ur --unidirectional-new-file seq24-0.8.3/src/seq24.cpp seq24-0.8.3-dr-lash-1/src/seq24.cpp
--- seq24-0.8.3/src/seq24.cpp	2006-02-14 23:47:12.000000000 -0500
+++ seq24-0.8.3-dr-lash-1/src/seq24.cpp	2006-03-04 15:12:33.000000000 -0500
@@ -21,11 +21,13 @@
 #include <getopt.h>
 #include <stdio.h>
 #include <stdlib.h>
+#include "config.h"
 #include "perform.h"
 #include "mainwnd.h"
 #include "midifile.h"
 #include "optionsfile.h"
 #include "font.h"
+#include "lash.h"
 
 /* struct for command parsing */
 static struct 
@@ -66,11 +68,15 @@
 
 font *p_font_renderer;
 
+lash *lash_driver = NULL;
+
 bool load_file = false;
 
 int 
 main (int argc, char *argv[])
 {
+	/* init the lash driver (strips lash specific cmdline arguments */
+	lash_driver = new lash(&argc, &argv);
 
     /* the main performance object */
     perform p; 
@@ -236,6 +242,8 @@
     }
 
     mainwnd mainwnd( &p );
+
+	lash_driver->start( &p );	
     kit.run();
     
     p.deinit_jack();
@@ -257,7 +265,7 @@
         printf( "Error calling getenv( \"HOME\" )" );  
     }
 
-    
+	delete lash_driver;
 
     return 0;
 }
diff -ur --unidirectional-new-file seq24-0.8.3/src/seqedit.cpp seq24-0.8.3-dr-lash-1/src/seqedit.cpp
--- seq24-0.8.3/src/seqedit.cpp	2006-02-12 19:28:19.000000000 -0500
+++ seq24-0.8.3-dr-lash-1/src/seqedit.cpp	2006-03-04 13:19:05.000000000 -0500
@@ -870,7 +870,7 @@
 
     if ( a_seq == -1 || !m_mainperf->is_active( a_seq )){
         m_entry_sequence->set_text("Off");
-         m_seqroll_wid->set_background_sequence( false, NULL );
+         m_seqroll_wid->set_background_sequence( false, 0 );
     }
     
     if ( m_mainperf->is_active( a_seq )){
diff -ur --unidirectional-new-file seq24-0.8.3/src/seqevent.cpp seq24-0.8.3-dr-lash-1/src/seqevent.cpp
--- seq24-0.8.3/src/seqevent.cpp	2006-02-12 19:15:54.000000000 -0500
+++ seq24-0.8.3-dr-lash-1/src/seqevent.cpp	2006-03-04 13:19:05.000000000 -0500
@@ -190,8 +190,8 @@
                              m_window_y );
 
 
-   int measure_length_64ths =  m_seq->get_bpm() * 64 /
-        m_seq->get_bw();
+   /*int measure_length_64ths =  m_seq->get_bpm() * 64 /
+        m_seq->get_bw();*/
     
     //printf ( "measure_length_64ths[%d]\n", measure_length_64ths );
     
diff -ur --unidirectional-new-file seq24-0.8.3/src/seqroll.cpp seq24-0.8.3-dr-lash-1/src/seqroll.cpp
--- seq24-0.8.3/src/seqroll.cpp	2006-02-12 19:15:54.000000000 -0500
+++ seq24-0.8.3-dr-lash-1/src/seqroll.cpp	2006-03-04 13:19:05.000000000 -0500
@@ -302,8 +302,8 @@
     }
 
 
-    int measure_length_64ths =  m_seq->get_bpm() * 64 /
-        m_seq->get_bw();
+    /*int measure_length_64ths =  m_seq->get_bpm() * 64 /
+        m_seq->get_bw();*/
     
     //printf ( "measure_length_64ths[%d]\n", measure_length_64ths );
     
diff -ur --unidirectional-new-file seq24-0.8.3/src/sequence.cpp seq24-0.8.3-dr-lash-1/src/sequence.cpp
--- seq24-0.8.3/src/sequence.cpp	2006-02-16 23:35:03.000000000 -0500
+++ seq24-0.8.3-dr-lash-1/src/sequence.cpp	2006-03-04 15:20:22.000000000 -0500
@@ -1826,7 +1826,7 @@
 }
 
 
-bool
+void
 sequence::move_selected_triggers_to( long a_tick, bool a_adjust_offset, int a_which )
 {
 
@@ -2546,7 +2546,7 @@
 
     for( list<event>::iterator i = m_list_event.begin(); i != m_list_event.end(); i++ )
 	(*i).print();
-    printf("events[%d]\n\n",m_list_event.size());
+    printf("events[%zd]\n\n",m_list_event.size());
 
 }
 
@@ -2559,7 +2559,7 @@
     for( list<trigger>::iterator i = m_list_trigger.begin();
          i != m_list_trigger.end(); i++ ){
 
-        long d= c_ppqn / 8;
+        /*long d= c_ppqn / 8;*/
         
         printf ("  tick_start[%ld] tick_end[%ld] off[%ld]\n", (*i).m_tick_start, (*i).m_tick_end, (*i).m_offset );
 
@@ -2572,7 +2572,7 @@
 {		
     lock();
 
-    char note = a_e->get_note();
+    unsigned char note = a_e->get_note();
     bool skip = false;
 	
     if ( a_e->is_note_on() ){
diff -ur --unidirectional-new-file seq24-0.8.3/src/sequence.h seq24-0.8.3-dr-lash-1/src/sequence.h
--- seq24-0.8.3/src/sequence.h	2006-02-12 19:15:54.000000000 -0500
+++ seq24-0.8.3-dr-lash-1/src/sequence.h	2006-03-04 15:20:33.000000000 -0500
@@ -284,7 +284,7 @@
     void copy_selected_trigger( void );
     void paste_trigger( void );
     
-    bool move_selected_triggers_to(long a_tick, bool a_adjust_offset, int a_which=2);
+    void move_selected_triggers_to(long a_tick, bool a_adjust_offset, int a_which=2);
     long get_selected_trigger_start_tick( void );
     long get_selected_trigger_end_tick( void );
 
